name: personal-app
services:
  mariadb:
    image: mariadb:11.4.2
    restart: unless-stopped
    env_file:
      - ./mariadb.env
    ports:
      - "3306:3306"
    volumes:
      - mariadb-vol:/var/lib/mysql
      - ../mariadb/conf.d:/etc/mysql/conf.d

  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.websecure.transport.respondingTimeouts.readTimeout=0s"
      - "--certificatesresolvers.presolver.acme.email=danjeremynavarro@gmail.com"
      - "--certificatesresolvers.presolver.acme.httpchallenge=true"
      - "--certificatesresolvers.presolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.presolver.acme.httpchallenge.entrypoint=web"
      - "--log.filePath=/log/traefik/traefik.log"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=presolver"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik-log:/log"
      - "traefik-vol:/letsencrypt"

  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
        - "prometheus-vol:/prometheus"
        - "../prometheus/:/etc/prometheus/"

  grafana:
    image: grafana/grafana-enterprise
    env_file:
      - ./grafana.env
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - "grafana-vol:/var/lib/grafana"
    labels:
      - "traefik.enable=true"
      #http
      - "traefik.http.middlewares.to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.to-https.redirectscheme.port=443"
      - "traefik.http.middlewares.to-https.redirectscheme.permanent=true"
      - "traefik.http.routers.monitoring.rule=Host(`monitoring.${DOMAIN}`)"
      - "traefik.http.routers.monitoring.middlewares=to-https"
      - "traefik.http.routers.monitoring.entrypoints=web"
      #https
      - "traefik.http.routers.monitoring-secure.rule=Host(`monitoring.${DOMAIN}`)"
      - "traefik.http.routers.monitoring-secure.entrypoints=websecure"
      - "traefik.http.routers.monitoring-secure.tls=true"
      - "traefik.http.routers.monitoring-secure.tls.certresolver=presolver"
    depends_on:
      - mariadb
      - traefik
  
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  nextcloud:
    image: nextcloud
    restart: unless-stopped
    env_file:
      - ./nextcloud.env
    volumes:
      - "nextcloud-vol:/var/www/html"
    depends_on:
      - mariadb
      - traefik
    labels:
      - "traefik.enable=true"
      #http
      - "traefik.http.middlewares.to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.to-https.redirectscheme.port=443"
      - "traefik.http.middlewares.to-https.redirectscheme.permanent=true"
      - "traefik.http.routers.nextcloud.rule=Host(`cloud.${DOMAIN}`)"
      - "traefik.http.routers.nextcloud.middlewares=to-https"
      - "traefik.http.routers.nextcloud.entrypoints=web"
      # headers
      - "traefik.http.middlewares.nextcloud-headers.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.nextcloud-headers.headers.stsSeconds=15552000"
      - "traefik.http.routers.nexcloud.middlewares=nextcloud-headers"
      - "traefik.http.routers.nexcloud-secure.middlewares=nextcloud-headers"
      #https
      - "traefik.http.routers.nextcloud-secure.rule=Host(`cloud.${DOMAIN}`)"
      - "traefik.http.routers.nextcloud-secure.entrypoints=websecure"
      - "traefik.http.routers.nextcloud-secure.tls=true"
      - "traefik.http.routers.nextcloud-secure.tls.certresolver=presolver"
  
  wordpress:
    image: wordpress
    restart: unless-stopped
    env_file:
      - "./wordpress.env"
    volumes:
      - "wordpress-vol:/var/www/html"
    depends_on:
      - "mariadb"
      - "traefik"
    labels:
      - "traefik.enable=true"
      #http
      - "traefik.http.middlewares.to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.to-https.redirectscheme.port=443"
      - "traefik.http.middlewares.to-https.redirectscheme.permanent=true"
      - "traefik.http.routers.wordpress.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.wordpress.middlewares=to-https"
      - "traefik.http.routers.wordpress.entrypoints=web"
      #https
      - "traefik.http.routers.wordpress-secure.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.wordpress-secure.entrypoints=websecure"
      - "traefik.http.routers.wordpress-secure.tls=true"
      - "traefik.http.routers.wordpress-secure.tls.certresolver=presolver"

  calibre:
    image: lscr.io/linuxserver/calibre:latest
    container_name: calibre
    security_opt:
      - seccomp:unconfined #optional
    env_file:
      - calibre.env
    volumes:
      - ./books:/config

    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      # http
      - "traefik.http.middlewares.to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.to-https.redirectscheme.port=443"
      - "traefik.http.middlewares.to-https.redirectscheme.permanent=true"
      - "traefik.http.routers.calibre.rule=Host(`calibre.${DOMAIN}`)"
      # - "traefik.http.routers.calibre.middlewares=to-https"
      - "traefik.http.routers.calibre.entrypoints=web"
      #https
      - "traefik.http.routers.calibre-secure.rule=Host(`calibre.${DOMAIN}`)"
      - "traefik.http.routers.calibre-secure.entrypoints=websecure"
      - "traefik.http.routers.calibre-secure.tls=true"
      - "traefik.http.routers.calibre-secure.tls.certresolver=presolver"
      - "traefik.http.services.calibre-secure.loadbalancer.server.port=1080"

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    command: ['start.sh', 'immich']
    volumes:
      - ${IMMICH_UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - immich.env
    # ports:
    #   - 2283:3001
    depends_on:
      - redis
      - database
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      # http
      - "traefik.http.middlewares.to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.to-https.redirectscheme.port=443"
      - "traefik.http.middlewares.to-https.redirectscheme.permanent=true"
      - "traefik.http.routers.photos.rule=Host(`photos.${DOMAIN}`)"
      - "traefik.http.routers.photos.middlewares=to-https"
      - "traefik.http.routers.photos.entrypoints=web"
      #https
      - "traefik.http.routers.photos-secure.rule=Host(`photos.${DOMAIN}`)"
      - "traefik.http.routers.photos-secure.entrypoints=websecure"
      - "traefik.http.routers.photos-secure.tls=true"
      - "traefik.http.routers.photos-secure.tls.certresolver=presolver"
      - "traefik.http.services.photos-secure.loadbalancer.server.port=3001"

  immich-microservices:
    container_name: immich_microservices
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/hardware-transcoding
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    command: ['start.sh', 'microservices']
    volumes:
      - ${IMMICH_UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - immich.env
    depends_on:
      - redis
      - database
    restart: unless-stopped

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - model-cache:/cache
    env_file:
      - immich.env
    restart: unless-stopped

  redis:
    container_name: immich_redis
    image: registry.hub.docker.com/library/redis:6.2-alpine@sha256:84882e87b54734154586e5f8abd4dce69fe7311315e2fc6d67c29614c8de2672
    restart: unless-stopped

  database:
    container_name: immich_postgres
    image: registry.hub.docker.com/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    restart: unless-stopped
    env_file:
      - immich.env
    environment:
      POSTGRES_PASSWORD: ${IMMICH_DB_PASSWORD}
      POSTGRES_USER: ${IMMICH_DB_USERNAME}
      POSTGRES_DB: ${IMMICH_DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${IMMICH_DB_DATA_LOCATION}:/var/lib/postgresql/data
    command: ["postgres", "-c" ,"shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - traefik
  
volumes:
  mariadb-vol:
  traefik-vol:
  traefik-log:
  nextcloud-vol:
  wordpress-vol:
  calibre-vol:
  postgres-vol:
  immich-vol:
  model-cache:
  prometheus-vol:
  grafana-vol:

